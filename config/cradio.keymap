// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
//#include <dt-binding/zmk/behavior-com
//#include <dt-bindings/zmk/behavior>

// Home row mods macro
//#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
//#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

#define BASELAYER 0
#define LFUNCTIONS 1
#define LNUMPAD 2
#define LCONTROL 3
#define WINBASE 4
#define LWINRIGHT 5
#define LWINLEFT 6
#define LWINCONTROL 7
#define LEDITING 8
#define LENTER 9
// #define LMACROS 9



// &lt {
//     flavor = "hold-preferred";
//     tapping-term-ms = <300>;
//     quick-tap-ms = <290>;
// };
// &mt {
//     flavor = "tap-preferred";
//     tapping-term-ms = <180>;
// };
//TODO: maybe this should be a separate behavior
&sl {
    // release-after-ms = <2000>;
    /delete-property/ quick-release;
};

/ {
    behaviors {
        // ht: hold_tap {
        //     label = "hold_tap";
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <220>;
        //     quick-tap-ms = <150>;
        //     global-quick-tap;
        //     bindings = <&kp>, <&kp>;
        // };
        // lt: layer_tap {
        //     label = "layer_tap";
        //     flavor = "hold-preferred";
        //     compatible = "zmk,behavior-hold-tap";
        //     tapping-term-ms = <230>;
        //     quick-tap-ms = <100>;
        //     bindings = <&kp>, <&kp>;
        // };

        lt_h: layer_tap_hold_preferred {
            #binding-cells = <2>;
            label = "layer_tap_hold_preferred"; 
            flavor = "hold-preferred";
            compatible = "zmk,behavior-hold-tap";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        // ht_sl: layer_tap_reversed {
        //     #binding-cells = <2>;
        //     label = "layer_tap_reversed"; 
        //     flavor = "hold-preferred";
        //     compatible = "zmk,behavior-hold-tap";
        //     tapping-term-ms = <200>;
        //     bindings = <&kp>, <&sl>;
        // };
        
        tdf: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&sl LFUNCTIONS>, <&to LFUNCTIONS>;
        };

        l_or_key: layer_or_key {
            #binding-cells = <2>;
            label = "layer_or_key"; 
            flavor = "hold-preferred";
            compatible = "zmk,behavior-hold-tap";
            tapping-term-ms = <200>;
            // bindings = <&kp>, <&tdf>;
            bindings = <&kp>, <&sl>;
        };

        bpsc_or_del: bpsc_or_del {
            compatible = "zmk,behavior-mod-morph";
            label = "bpsc_or_del";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_RSFT)>;
        };

        j_or_f4: j_or_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "j_or_f4";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp F4>;
            mods = <(MOD_RGUI)>;
        };

        k_or_f5: k_or_f5 {
            compatible = "zmk,behavior-mod-morph";
            label = "k_or_f5";
            #binding-cells = <0>;
            bindings = <&kp K>, <&kp F5>;
            mods = <(MOD_RGUI)>;
        };

        u_or_f10: u_or_f10 {
            compatible = "zmk,behavior-mod-morph";
            label = "u_or_f10";
            #binding-cells = <0>;
            bindings = <&kp U>, <&kp F10>;
            mods = <(MOD_RGUI)>;
        };
    };

    macros {
        editing_macro: editing_macro {
            compatible = "zmk,behavior-macro";
            label = "ZM_editing_macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <40>;
            // bindings = <&kp BSPC &mo LEDITING>;
            bindings
                = <&kp BACKSPACE>
                , <&macro_press &mo LEDITING>
                , <&macro_pause_for_release>
                , <&macro_release &mo LEDITING>
                ;
        };
        enter_macro: enter_macro {
            compatible = "zmk,behavior-macro";
            label = "ZM_enter_macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <40>;
            // bindings = <&kp BSPC &mo LEDITING>;
            bindings
                = <&kp ENTER>
                , <&macro_press &mo LENTER>
                , <&macro_pause_for_release>
                , <&macro_release &mo LENTER>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
        // combo_esc {
        //     timeout-ms = <30>;
        //     key-positions = <0 1>;
        //     bindings = <&kp ESC>;
        // };
        // combo_bootloader {
        //     timeout-ms = <50>;
        //     key-positions = <0 1 2 3 4>;
        //     bindings = <&bootloader>;
        // };
        // combo_bootloader_both {
        //     timeout-ms = <70>;
        //     key-positions = <0 1 2 3 6 7 8 9>;
        //     bindings = <&bootloader>;
        // };

        // Enter and semi
        combo_enter_right {
            timeout-ms = <160>;
            slow-release;
            key-positions = <16 17 18>;
            bindings = <&enter_macro>;
            layers = <0 1 2 4 5 6>;
        };
        combo_enter_left {
            timeout-ms = <160>;
            slow-release;
            key-positions = <11 12 13>;
            bindings = <&enter_macro>;
            layers = <0 1 2 4 5 6>;
        };
        combo_semicolon_right {
            timeout-ms = <200>;
            // slow-release;
            // key-positions = <6 7 8 9>;
            key-positions = <16 17 18 19>;
            bindings = <&kp SEMICOLON>;
            layers = <0 1 2 4 5 6>;
        };

        // Used for doc formatting in VS Code
        combo_shift_alt_f {
            timeout-ms = <160>;
            key-positions = <10 11 12 13>;
            bindings = <&kp LS(LA(F))>;
            layers = <0>;
        };
        
        // Esc
        combo_esc_left {
            timeout-ms = <100>;
            key-positions = <0 1 2 3>;
            bindings = <&kp ESC>;
            layers = <0 1 2 4 5 6>;
        };

        // Caps
        combo_caps {
            timeout-ms = <100>;
            key-positions = <0 1 2>;
            bindings = <&kp CAPSLOCK>;
            layers = <0 1 2 4 5 6>;
        };

        // Backspace and delete
        combo_delete_right {
            timeout-ms = <180>;
            key-positions = <8 9>;
            bindings = <&kp DEL>;
            layers = <LNUMPAD LWINLEFT>;
        };
        combo_backspace_left {
            timeout-ms = <80>;
            key-positions = <1 2 3>;
            bindings = <&kp BACKSPACE>;
            layers = <0 1 2 4 5 6>;
        };
        // combo_delete_left {
        //     timeout-ms = <100>;
        //     key-positions = <0 1 2>;
        //     bindings = <&kp DEL>;
        //     layers = <0 1 2 4 5 6>;
        // };

        // To fix accidental two key preseses with right thumb
        // combo_rightspaces {
        //     timeout-ms = <110>;
        //     key-positions = <32 33>;
        //     bindings = <&kp SPACE>;
        // };

        // The system control layers
        combo_controllayerleft {
            timeout-ms = <220>;
            key-positions = <1 2 3 4>;
            slow-release;
            bindings = <&mo 3>;
            layers = <0 1 2 4 5 6>;
        };
        combo_controllayerright {
            timeout-ms = <220>;
            key-positions = <5 15 25>;
            slow-release;
            bindings = <&mo 3>;
            layers = <0 1 2 4 5 6>;
        };

        // Alt and Ctrl
        combo_leftcontrol {
            timeout-ms = <90>;
            key-positions = <20 21 22>;
            // Doing slow release here only for the left hand so ctrl-c will be easy
            slow-release;
            bindings = <&kp LCTRL>;
            layers = <0 1 2>;
        };
        combo_rightcontrol {
            timeout-ms = <90>;
            key-positions = <27 28 29>;
            bindings = <&kp RCTRL>;
            layers = <0 1 2>;
        };
        combo_leftalt {
            timeout-ms = <90>;
            key-positions = <22 23 24>;
            bindings = <&kp LALT>;
            layers = <0 1 2>;
        };
        combo_rightalt {
            timeout-ms = <90>;
            key-positions = <25 26 27>;
            bindings = <&kp RALT>;
            layers = <0 1 2>;
        };

        // Win Alt and Ctl
        win_combo_leftcontrol {
            timeout-ms = <90>;
            key-positions = <20 21 22>;
            // Doing slow release here only for the left hand so ctrl-c will be easy
            slow-release;
            bindings = <&kp LALT>;
            layers = <4 5 6>;
        };
        win_combo_rightcontrol {
            timeout-ms = <90>;
            key-positions = <27 28 29>;
            bindings = <&kp RALT>;
            layers = <4 5 6>;
        };
        win_combo_leftalt {
            timeout-ms = <90>;
            key-positions = <22 23 24>;
            bindings = <&kp LGUI>;
            layers = <4 5 6>;
        };
        win_combo_rightalt {
            timeout-ms = <90>;
            key-positions = <25 26 27>;
            bindings = <&kp RGUI>;
            layers = <4 5 6>;
        };

        // Clipboard with right hand
        cut_right {
            timeout-ms = <120>;
            key-positions = <5 6 7 8>;
            bindings = <&kp LG(X)>;
            layers = <0>;
        };
        copy_right {
            timeout-ms = <120>;
            key-positions = <6 7 8 9>;
            bindings = <&kp LG(C)>;
            layers = <0>;
        };
        paste_right {
            timeout-ms = <120>;
            key-positions =<26 27 28 29>;
            bindings = <&kp LG(V)>;
            layers = <0>;
        };


        // Win Clipboard with right hand
        win_cut_right {
            timeout-ms = <120>;
            key-positions = <5 6 7 8>;
            bindings = <&kp LC(X)>;
            layers = <4>;
        };
        win_copy_right {
            timeout-ms = <120>;
            key-positions = <6 7 8 9>;
            bindings = <&kp LC(C)>;
            layers = <4>;
        };
        win_paste_right {
            timeout-ms = <120>;
            key-positions =<26 27 28 29>;
            bindings = <&kp LC(V)>;
            layers = <4>;
        };

        // Win/Mac switching
        winmacswitch_right { 
            timeout-ms = <600>;
            key-positions =<9 19 29>;
            bindings = <&to WINBASE>;
            layers = <BASELAYER>;
        };
        winmacswitch_left { 
            timeout-ms = <600>;
            key-positions =<0 10 20>;
            bindings = <&to WINBASE>;
            layers = <BASELAYER>;
        };
        win_winmacswitch_right { 
            timeout-ms = <600>;
            key-positions =<9 19 29>;
            bindings = <&to BASELAYER>;
            layers = <WINBASE>;
        };
        win_winmacswitch_left { 
            timeout-ms = <600>;
            key-positions =<0 10 20>;
            bindings = <&to BASELAYER>;
            layers = <WINBASE>;
        };

        // Num pad lock
        // numpad_lock {
        //     timeout-ms = <300>;
        //     key-positions = <15 16 17 18>;
        //     bindings = <&to LNUMPAD>;
        //     layers = <BASELAYER>;
        // };
        // numpad_unlock {
        //     timeout-ms = <300>;
        //     key-positions = <15 16 17 18>;
        //     bindings = <&to BASELAYER>;
        //     layers = <LNUMPAD>;
        // };

        // win_numpad_lock {
        //     timeout-ms = <300>;
        //     key-positions = <15 16 17 18>;
        //     bindings = <&to LWINLEFT>;
        //     layers = <WINBASE>;
        // };
        // win_numpad_unlock {
        //     timeout-ms = <300>;
        //     key-positions = <15 16 17 18>;
        //     bindings = <&to WINBASE>;
        //     layers = <LWINLEFT>;
        // };

        // Editing
        // combo_editing_with_bspc {
        //     timeout-ms = <200>;
        //     slow-release;
        //     key-positions = <16 17 18 19>;
        //     bindings = <&editing_macro>;
        //     layers = <0 1 2 4 5 6>;
        // };
        // combo_editing {
        //     timeout-ms = <200>;
        //     slow-release;
        //     key-positions = <16 18 19>;
        //     bindings = <&mo LEDITING>;
        //     layers = <0 1 2 4 5 6>;
        // };

        // Function layer locking
        fn_lock {
            timeout-ms = <300>;
            key-positions = <15 16 17 18>;
            bindings = <&to LFUNCTIONS>;
            layers = <BASELAYER>;
        };
        fn_unlock {
            timeout-ms = <300>;
            key-positions = <15 16 17 18>;
            bindings = <&to BASELAYER>;
            layers = <LFUNCTIONS>;
        };

        
    };

    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <1 2>;
    //         then-layer = <3>;
    //     };
    // };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│  Q       │  W       │  E       │  R       │  T       │   │  Y       │  U       │  I       │  O       │  P       │
            &kp Q      &kp W      &kp E      &kp R      &kp T          &kp Y      &u_or_f10      &kp I      &kp O      &kp P
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  A       │  S       │  D       │  F       │  G       │   │  H       │  J       │  K       │  L       │ ' "      │
            &kp A        &kp S     &kp D         &kp F     &kp G        &kp H     &j_or_f4      &k_or_f5   K      &kp L    &kp SQT
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  Z       │  X       │    C     │  V       │    B     │   │    N       │  M       │ , <      │ . >    │ / ?      │
        &mt LSHFT Z      &kp X      &kp C      &kp V      &kp B          &kp N   &kp M    &kp COMMA    &kp DOT    &mt RSHFT FSLH
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                          &mt LGUI SEMI  &lt_h 2 TAB   &lt 2 SPACE  &l_or_key RGUI LFUNCTIONS
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        functions_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            &kp ESC  &kp LA(LEFT) &kp UARW &kp LA(RIGHT) &kp LBKT       &kp F9    &kp F10   &kp F11    &kp F12    &kp GRAVE
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            &kp HOME   &kp LEFT   &kp DARW   &kp RIGHT   &kp END          &kp F8     &kp F4    &kp F5      &kp F6    &kp TILDE
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
          &mt LSHFT LBRC &kp RBRC  &kp LPAR  &kp RPAR   &kp RBKT         &kp F7     &kp F1    &kp F2      &kp F3    &mt RSHFT BSLH
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &trans    &kp ESC      &to BASELAYER    &kp RGUI
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        // can be combined: ;: \| [{ `~ =+
        // need: `~ \| [ ] { } ( ) _ 
        numpad_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            &kp ESC  &kp LA(LEFT) &kp UARW &kp LA(RIGHT) &kp LBKT    &kp PLUS    &kp N7     &kp N8    &kp N9     &kp BSPC
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            &kp HOME   &kp LEFT   &kp DARW   &kp RIGHT   &kp END       &kp EQUAL    &kp N4    &kp N5      &kp N6    &kp N0
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
          &mt LSHFT LBRC &kp RBRC  &kp LPAR  &kp RPAR   &kp RBKT       &kp MINUS    &kp N1    &kp N2     &kp N3    &mt RSHFT BSLH
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &trans     &kp ESC        &kp SPACE   &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        controls_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│ RESET    │          │          │          │          │   │          │          │          │          │          │
            &sys_reset  &trans      &trans    &kp LA(LG(PG_UP))  &kp C_NEXT    &kp C_NEXT &kp LA(LG(PG_UP))  &trans     &trans      &sys_reset
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│BOOTLOADER│          │          │          │          │   │          │          │          │          │          │
          &bootloader &out OUT_BLE &trans &kp LA(LG(PG_DN))  &kp C_PREV    &kp C_PREV   &kp LA(LG(PG_DN))  &trans     &sys_reset    &bootloader
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│          │          │          │          │          │   │          │          │          │          │          │
           &trans     &out OUT_USB  &trans  &kp C_PP   &kp C_PP        &kp C_PP   &kp C_PP   &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                        &kp C_VOL_DN  &kp C_VOL_UP    &kp C_VOL_UP  &kp C_VOL_DN
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        win_default_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│  Q       │  W       │  E       │  R       │  T       │   │  Y       │  U       │  I       │  O       │  P       │
            &kp Q      &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  A       │  S       │  D       │  F       │  G       │   │  H       │  J       │  K       │  L       │ ' "      │
            &kp A        &kp S     &kp D         &kp F     &kp G        &kp H     &kp  J      &kp   K      &kp L    &kp SQT
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  Z       │  X       │    C     │  V       │    B     │   │    N       │  M       │ , <      │ . >    │ / ?      │
        &mt LSHFT Z      &kp X      &kp C      &kp V      &kp B          &kp N   &kp M    &kp COMMA    &kp DOT    &mt RSHFT FSLH
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                            &mt LCTRL SEMI   &lt_h 6 TAB     &lt 5 SPACE   &l_or_key RCTRL LWINRIGHT
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        win_right_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            &kp GRAVE  &kp LC(LEFT) &kp UARW &kp LC(RIGHT) &kp LBKT       &kp F9    &kp F10   &kp F11    &kp F12    &trans
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            &kp HOME   &kp LEFT   &kp DARW   &kp RIGHT   &kp END          &kp F8     &kp F4    &kp F5      &kp F6    &trans
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
          &mt LSHFT LBRC &kp RBRC  &kp LPAR  &kp RPAR   &kp RBKT         &kp F7     &kp F1    &kp F2      &kp F3    &mt RSHFT BSLH
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &trans    &lt_h 6 ESC      &trans     &kp RCTRL
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        win_left_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            &kp GRAVE  &kp LC(LEFT) &kp UARW &kp LC(RIGHT) &kp LBKT    &kp PLUS    &kp N7   &kp N8    &kp N9     &kp BSPC
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            &kp HOME   &kp LEFT   &kp DARW   &kp RIGHT   &kp END       &kp EQUAL    &kp N4    &kp N5      &kp N6    &kp N0
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
          &mt LSHFT LBRC &kp RBRC  &kp LPAR  &kp RPAR   &kp RBKT     &kp MINUS    &kp N1    &kp N2     &kp N3    &mt RSHFT BSLH
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &trans     &kp ESC        &kp SPACE   &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
        
        win_controls_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│ RESET    │          │          │          │          │   │          │          │          │          │          │
            &sys_reset  &trans      &trans    &kp LA(LG(PG_UP))  &kp C_NEXT    &kp C_NEXT &kp LA(LG(PG_UP))  &trans     &trans      &sys_reset
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│BOOTLOADER│          │          │          │          │   │          │          │          │          │          │
          &bootloader &out OUT_BLE &trans &kp LA(LG(PG_DN))  &kp C_PREV    &kp C_PREV   &kp LA(LG(PG_DN))  &trans     &sys_reset    &bootloader
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│          │          │          │          │          │   │          │          │          │          │          │
           &trans     &out OUT_USB  &trans  &kp C_PP   &kp C_PP        &kp C_PP   &kp C_PP   &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                        &kp C_VOL_DN  &kp C_VOL_UP    &kp C_VOL_UP  &kp C_VOL_DN
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        editing_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│          │          │          │          │          │   │          │          │          │          │          │
            &trans     &trans     &trans     &trans    &trans          &trans     &trans     &trans     &trans      &trans
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //           │          │          │          │           │  │          │          │          |          |          |
          &trans       &trans     &kp DEL     &kp BSPC    &trans            &trans     &kp BSPC     &kp DEL     &trans      &trans
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│          │          │          │ CLEAR BT │PROFILE 2 │   │          │          │          │          │          │
            &trans     &trans     &trans    &trans       &trans    &trans     &trans     &trans     &trans     &trans
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &trans     &trans         &trans     &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        enter_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│          │          │          │          │          │   │          │          │          │          │          │
            &trans     &trans     &trans     &trans    &trans          &trans     &trans     &trans     &trans      &trans
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //           │          │          │          │           │  │          │          │          |          |          |
          &trans       &trans     &kp ENTER   &kp ENTER    &trans       &trans     &kp ENTER   &kp ENTER     &trans  &trans
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│          │          │          │ CLEAR BT │PROFILE 2 │   │          │          │          │          │          │
            &trans     &trans     &trans    &trans       &trans    &trans     &trans     &trans     &trans     &trans
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &trans     &trans         &trans     &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        // tri_layer {
        //     bindings = <
        // //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        // //│ RESET    │          │          │          │PROFILE 0 │   │          │          │          │          │  RESET   │
        //     &reset     &trans     &trans     &trans    &bt BT_SEL 0    &trans     &trans     &trans     &trans      &reset
        // //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        // //│BOOTLOADER│          │          │          │PROFILE 1 │   │          │          │          │          │BOOTLOADER│
        //   &bootloader  &trans     &trans     &trans    &bt BT_SEL 1    &trans     &trans     &trans     &trans    &bootloader
        // //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        // //│          │          │          │ CLEAR BT │PROFILE 2 │   │          │          │          │          │          │
        //     &trans     &trans     &trans    &bt BT_CLR &bt BT_SEL 2    &trans     &trans     &trans     &trans     &trans
        // //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
        //                                      &trans     &trans         &trans     &trans
        // //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
        //     >;
        // };

        // system_layer {
        //     bindings = <
        // //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        // //│ RESET    │          │          │          │PROFILE 0 │   │          │          │          │          │          │
        //     &reset   &trans      &trans    &kp LA(LG(PG_UP))  &bt BT_SEL 0   &kp C_NEXT &kp LA(LG(PG_UP))  &trans     &trans      &trans
        // //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        // //│BOOTLOADER│          │          │          │PROFILE 1 │   │          │          │          │          │          │
        //   &bootloader &out OUT_BLE &trans &kp LA(LG(PG_DN))  &bt BT_SEL 1   &kp C_PREV   &kp LA(LG(PG_DN))  &trans     &reset    &bootloader
        // //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        // //│          │          │          │          │PROFILE 2 │   │          │          │          │          │          │
        //    &bt BT_CLR  &out OUT_USB  &trans  &trans      &bt BT_SEL 2     &kp C_PP   &kp C_PP     &trans     &trans     &trans
        // //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
        //                                 &kp C_VOL_DN  &kp C_VOL_UP    &kp C_VOL_UP  &kp C_VOL_DN
        // //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
        //     >;
        // };
    };
};
